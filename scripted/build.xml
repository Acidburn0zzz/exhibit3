<?xml version="1.0" encoding="UTF-8"?>

<!--
    | Exhibit 3.0 build tasks
     -->

<project name="exhibit3" basedir="." default="publish-local">

  <property name="tools" value="tools"/>
  <property name="src" value="src"/>
  <property name="tests" value="tests"/>
  <property name="lib" value="lib"/>
  <property name="build" value="build"/>
  <property name="docs" value="${build}/docs"/>
  <property name="demos" value="${build}/demos"/>
  <property name="bundle" value="${build}/bundle"/>
  <property name="rjs.dir" value="optimize"/>
  <property name="bundleStyle" value="${bundle}/styles"/>
  <property name="demosSrc" value="demos"/>
  <property name="testsOutput" value="${build}/tests"/>
  <property name="instrument" value="${build}/instrument"/>
  <property name="coverage" value="${build}/coverage"/>
  <property name="dist" value="${build}/dist"/>

  <property name="modules" value=""/>
  <property name="lintfile" value=""/>
  <property name="extension" value=""/>

  <property name="jscoverage.dir" value="/usr/local/bin"/>
  <property name="jscoverage.port" value="9876"/>
  <property file="local.build.properties"/>

  <condition property="jscoverage.exists">
    <and>
      <resourceexists>
        <file file="${jscoverage.dir}/jscoverage-server"/>
      </resourceexists>
      <resourceexists>
        <file file="${jscoverage.dir}/jscoverage"/>
      </resourceexists>
    </and>
  </condition>

  <condition property="jscoverage.report.exists">
    <resourceexists>
      <file file="${lib}/jscoverage-report.js"/>
    </resourceexists>
  </condition>

  <taskdef
     name="jsdoctoolkit"
     classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit"
     classpath="${tools}/jsdoc-toolkit-ant/jsdoc-toolkit-ant-task.jar;${tools}/rhino/js.jar"
     />

  <taskdef
     name="jslint"
     classname="com.googlecode.jslint4java.ant.JSLintTask"
     classpath="${tools}/jslint4java/jslint4java.jar"
     />





  <!-- Bundle code for RequireJS-unaware deployment -->
  <target name="bundle" description="RequireJS-independent bundle">
    <fileset dir="${src}/nls/" includes="**/*.js" id="locales"/>
    <pathconvert dirsep="/" refid="locales" property="localelist" pathsep=",">
      <map from="${basedir}/${src}/" to=""/>
      <globmapper from="*.js" to="*"/>
    </pathconvert>

    <exec dir="." executable="node">
      <arg line="${rjs.dir}/r.js -o ${rjs.dir}/build.js out=${bundle}/exhibit-api.js deps=${localelist}"/>
    </exec>
  </target>





  <!-- Bundle code for RequireJS-unaware deployment -->
  <target name="bundle-debug" description="Bundle debug build">
    <fileset dir="${src}/nls/" includes="**/*.js" id="locales"/>
    <pathconvert dirsep="/" refid="locales" property="localelist" pathsep=",">
      <map from="${basedir}/${src}/" to=""/>
      <globmapper from="*.js" to="*"/>
    </pathconvert>

    <exec dir="." executable="node">
      <arg line="${rjs.dir}/r.js -o ${rjs.dir}/build.js out=${bundle}/exhibit-api-debug.js deps=${localelist} optimize=none"/>
    </exec>

    <copy file="${bundle}/exhibit-api-debug.js" todir="${src}"/>
  </target>





  <!-- Bundle code for RequireJS-aware environment -->
  <target name="bundle-require" description="RequireJS bundle">
    <exec dir="." executable="node">
      <arg line="${rjs.dir}/r.js -o ${rjs.dir}/build-require.js out=${bundle}/exhibit-bundle.js"/>
    </exec>
  </target>





  <!-- Bundle stylesheets -->
  <target name="bundle-css" description="CSS bundle">
    <exec dir="." executable="node">
      <arg line="${rjs.dir}/r.js -o ${rjs.dir}/build-css.js out=${bundle}/exhibit-bundle.css"/>
    </exec>
  </target>





  <!-- Modular bundling of extensions -->
  <target name="extension-bundle" description="Combine extension source files">
    <fileset dir="${src}/extensions/${extension}/nls/" includes="**/*.js" id="locales"/>
    <pathconvert dirsep="/" refid="locales" property="localelist" pathsep=",">
      <map from="${basedir}/${src}/extensions/${extension}" to="ext/${extension}"/>
      <globmapper from="*.js" to="*"/>
    </pathconvert>

    <mkdir dir="${bundle}/extensions/${extension}"/>
    <mkdir dir="${bundle}/extensions/${extension}/styles"/>

    <exec dir="." executable="node">
      <arg line="${rjs.dir}/r.js -o ${rjs.dir}/build-css.js cssIn=${src}/extensions/${extension}/styles/main.css out=${bundle}/extensions/${extension}/styles/${extension}-extension-bundle.css"/>
    </exec>

    <exec dir="." executable="node">
      <arg line="${rjs.dir}/r.js -o ${rjs.dir}/build-extension.js name=ext/${extension}/${extension}-extension out=${bundle}/extensions/${extension}/${extension}-extension-bundle.js include=${localelist}"/>
    </exec>
  </target>





  <!-- Modular bundling of map extensions, adds shared locales -->
  <target name="map-extension-bundle" description="Combine map-based extension source files">
    <fileset dir="${src}/extensions/map/nls/" includes="**/*.js" id="locales"/>
    <pathconvert dirsep="/" refid="locales" property="localelist" pathsep=",">
      <map from="${basedir}/${src}/extensions/map" to="ext/map"/>
      <globmapper from="*.js" to="*"/>
    </pathconvert>

    <mkdir dir="${bundle}/extensions/${extension}"/>
    <mkdir dir="${bundle}/extensions/${extension}/styles"/>

    <exec dir="." executable="node">
      <arg line="${rjs.dir}/r.js -o ${rjs.dir}/build-css.js cssIn=${src}/extensions/${extension}/styles/main.css out=${bundle}/extensions/${extension}/styles/${extension}-extension-bundle.css"/>
    </exec>

    <exec dir="." executable="node">
      <arg line="${rjs.dir}/r.js -o ${rjs.dir}/build-extension.js name=ext/${extension}/${extension}-extension out=${bundle}/extensions/${extension}/${extension}-extension-bundle.js include=${localelist}"/>
    </exec>
  </target>





  <!-- Bundle each piece -->
  <target name="bundle-all">
    <antcall target="bundle"/>
    <antcall target="bundle-require"/>
    <antcall target="bundle-css"/>
    <antcall target="extension-bundle">
      <param name="extension" value="time"/>
    </antcall>
    <antcall target="map-extension-bundle">
      <param name="extension" value="map"/>
    </antcall>
    <antcall target="map-extension-bundle">
      <param name="extension" value="openlayers"/>
    </antcall>
    <!-- invalid-json is self contained in one file, no need to add here -->
  </target>





  <target name="omnibundle" description="Bundle everything, standalone">
    <!-- @@@ to do -->
  </target>





  <!-- Publish built files locally for use -->
  <target name="publish-extension-local" description="Publish extension within src/">
    <copy file="${bundle}/extensions/${extension}/${extension}-extension-bundle.js" todir="${src}/extensions/${extension}"/>
    <copy file="${bundle}/extensions/${extension}/styles/${extension}-extension-bundle.css" todir="${src}/extensions/${extension}/styles"/>
  </target>





  <!-- Publish built files locally for use -->
  <target name="publish-local" depends="bundle-all" description="Publish within src/">
    <copy file="${bundle}/exhibit-api.js" todir="${src}"/>
    <copy file="${bundle}/exhibit-bundle.js" todir="${src}"/>
    <copy file="${bundle}/exhibit-bundle.css" todir="${src}/styles"/>
    <antcall target="publish-extension-local">
      <param name="extension" value="time"/>
    </antcall>
    <antcall target="publish-extension-local">
      <param name="extension" value="map"/>
    </antcall>
    <antcall target="publish-extension-local">
      <param name="extension" value="openlayers"/>
    </antcall>
  </target>





  <!-- Demo builder -->
  <target name="demos" depends="dist" description="Build demos">
    <copy todir="${demos}">
      <fileset dir="${demosSrc}"/>
    </copy>
    <copy todir="${demos}/api">
      <fileset dir="${dist}"/>
    </copy>
  </target>





  <!-- Distribution builder -->
  <target name="dist" description="Assemble existing and generated files into a directory that can be served online" depends="publish-local">
    <mkdir dir="${dist}"/>
    <copy todir="${dist}">
      <fileset dir="${src}"/>
    </copy>
  </target>





  <!-- Documentation generator -->
  <target name="docs" description="Generate code documentation">
    <mkdir dir="${docs}"/>
    <jsdoctoolkit
       jsdochome="${tools}/jsdoc-toolkit/"
       template="jsdoc"
       outputdir="${docs}/">
      <fileset dir="${src}/" includes="*.js,**/*.js" excludes="lib/*.js,node/*.js" />
    </jsdoctoolkit>
  </target>





  <!-- Coverage reporting -->
  <target name="coverage" description="Generate code coverage report">
    <fail unless="${jscoverage.exists}"
          message="The JSCoverage server and instrumentation programs could not be located, check the jscoverage.dir setting"/>
    <fail unless="${jscoverage.report.exists}"
          message="The JSCoverage report script could not be located at lib/jscoverage-report.js"/>
    <mkdir dir="${instrument}"/>
    <mkdir dir="${coverage}"/>
    <exec dir="." executable="${jscoverage.dir}/jscoverage-server" spawn="true">
      <arg line="--port=${jscoverage.port} --report-dir=${coverage} --no-instrument=${instrument}/lib/ --no-instrument=${instrument}/tests/ --no-instrument=${instrument}/src/"/>
    </exec>
    <exec dir="." executable="${jscoverage.dir}/jscoverage">
      <arg line="--no-instrument=lib/ ${src} ${instrument}/src"/>
    </exec>
    <copy todir="${instrument}/tests">
      <fileset dir="${tests}"/>
    </copy>
    <copy todir="${instrument}/lib">
      <fileset dir="${lib}"/>
    </copy>
    <java
       classpath="${tools}/rhino/js.jar"
       classname="org.mozilla.javascript.tools.shell.Main">
      <arg line="-opt -1 ${lib}/coverage-runner.js ${jscoverage.port}"/>
    </java>
    <exec dir="." executable="${jscoverage.dir}/jscoverage-server">
      <arg line="--port=${jscoverage.port} --shutdown"/>
    </exec>
  </target>





  <!-- Mono lint -->
  <target name="lintone" description="Run lint on one file">
    <!-- see http://happygiraffe.github.com/jslint4java/ant.html -->
    <jslint haltOnFailure="false" options="evil,sloppy,white,plusplus,browser,nomen,devel">
      <predef>jQuery, $$</predef>
      <formatter type="plain" />
      <fileset dir="." includes="${lintfile}" />
    </jslint>
  </target>





  <!-- Tests -->
  <target name="lint">
    <!-- see http://happygiraffe.github.com/jslint4java/ant.html -->
    <jslint haltOnFailure="false" options="evil,sloppy,white,plusplus,browser,nomen,devel">
      <predef>define, require, requirejs, Exhibit</predef>
      <formatter type="plain" />
      <fileset dir="${src}" includes="*.js,**/*.js" excludes="lib/*.js,**/lib/*.js" />
    </jslint>
  </target>

  <target name="qunit">
    <mkdir dir="${testsOutput}"/>
    <!-- the magic starts in lib/test-runner.js -->
    <java
       classpath="${tools}/rhino/js.jar"
       classname="org.mozilla.javascript.tools.shell.Main">
      <arg line="-opt -1 ${lib}/test-runner.js ${modules}"/>
    </java>
  </target>

  <target name="test" depends="lint,qunit" description="Run all tests"/>





  <!-- Cleanup -->
  <target name="clean-demos">
    <delete dir="${demos}/" quiet="true"/>
  </target>

  <target name="clean-docs">
    <delete dir="${docs}/" quiet="true"/>
  </target>

  <target name="clean-bundle">
    <delete dir="${bundle}" quiet="true"/>
  </target>

  <target name="clean-publish-extension">
    <delete file="${src}/extensions/${extension}/${extension}-extension-bundle.js"/>
    <delete file="${src}/extensions/${extension}/styles/${extension}-extension-bundle.css"/>
  </target>

  <target name="clean-publish">
    <delete file="${src}/exhibit-api.js"/>
    <delete file="${src}/exhibit-bundle.js"/>
    <delete file="${src}/styles/exhibit-bundle.css"/>
    <antcall target="clean-publish-extension">
      <param name="extension" value="time"/>
    </antcall>
    <antcall target="clean-publish-extension">
      <param name="extension" value="map"/>
    </antcall>
    <antcall target="clean-publish-extension">
      <param name="extension" value="openlayers"/>
    </antcall>
  </target>

  <target name="clean-dist">
    <delete dir="${dist}" quiet="true"/>
  </target>

  <target name="clean-coverage">
    <delete dir="${coverage}/" quiet="true"/>
  </target>

  <target name="clean-instrument">
    <delete dir="${instrument}/" quiet="true"/>
  </target>

  <target name="clean-jscoverage" depends="clean-coverage,clean-instrument"/>

  <target name="clean-tests">
    <delete dir="${testsOutput}/" quiet="true"/>
  </target>

  <target name="clean" depends="clean-demos,clean-bundle,clean-publish,clean-dist,clean-docs,clean-jscoverage,clean-tests" description="Remove build artificats"/>

</project>
